From 729d1cbcd599e848bee07c72a276ccc02a06ddc0 Mon Sep 17 00:00:00 2001
From: "Rebecca N. Palmer" <rebecca_palmer@zoho.com>
Date: Fri, 11 Oct 2024 09:38:52 +0100
Subject: [PATCH 1/3] gdatetime test: Do not assume PST8PDT was always exactly
 -8/-7

In newer tzdata, it is an alias for America/Los_Angeles, which has a
slightly different meaning: DST did not exist there before 1883. As a
result, we can no longer hard-code the knowledge that interval 0 is
standard time and interval 1 is summer time, and instead we need to look
up the correct intervals from known timestamps.

Resolves: https://gitlab.gnome.org/GNOME/glib/-/issues/3502
Bug-Debian: https://bugs.debian.org/1084190
[smcv: expand commit message, fix whitespace]
Signed-off-by: Simon McVittie <smcv@debian.org>

Upstream-Status: Backport
[https://github.com/GNOME/glib/commit/c0619f08e6c608fd6464d2f0c6970ef0bbfb9ecf]

Signed-off-by: Jinfeng Wang <jinfeng.wang.cn@windriver.com>
---
 glib/tests/gdatetime.c | 22 ++++++++++++++++------
 1 file changed, 16 insertions(+), 6 deletions(-)

diff --git a/glib/tests/gdatetime.c b/glib/tests/gdatetime.c
index d46f653ac..2eefc4106 100644
--- a/glib/tests/gdatetime.c
+++ b/glib/tests/gdatetime.c
@@ -2930,6 +2930,7 @@ test_posix_parse (void)
 {
   GTimeZone *tz;
   GDateTime *gdt1, *gdt2;
+  gint i1, i2;
 
   /* Check that an unknown zone name falls back to UTC. */
   G_GNUC_BEGIN_IGNORE_DEPRECATIONS
@@ -2953,16 +2954,25 @@ test_posix_parse (void)
 
 /* This fails rules_from_identifier on Unix (though not on Windows)
  * but passes anyway because PST8PDT is a zone name.
+ *
+ * Intervals i1 and i2 (rather than 0 and 1) are needed because in
+ * recent tzdata, PST8PDT may be an alias for America/Los_Angeles,
+ * and hence be aware that DST has not always existed.
+ * https://bugs.debian.org/1084190
  */
   tz = g_time_zone_new_identifier ("PST8PDT");
   g_assert_nonnull (tz);
   g_assert_cmpstr (g_time_zone_get_identifier (tz), ==, "PST8PDT");
-  g_assert_cmpstr (g_time_zone_get_abbreviation (tz, 0), ==, "PST");
-  g_assert_cmpint (g_time_zone_get_offset (tz, 0), ==, - 8 * 3600);
-  g_assert (!g_time_zone_is_dst (tz, 0));
-  g_assert_cmpstr (g_time_zone_get_abbreviation (tz, 1), ==, "PDT");
-  g_assert_cmpint (g_time_zone_get_offset (tz, 1), ==,- 7 * 3600);
-  g_assert (g_time_zone_is_dst (tz, 1));
+  /* a date in winter = non-DST */
+  i1 = g_time_zone_find_interval (tz, G_TIME_TYPE_STANDARD, 0);
+  /* approximately 6 months in seconds, i.e. a date in summer = DST */
+  i2 = g_time_zone_find_interval (tz, G_TIME_TYPE_DAYLIGHT, 15000000);
+  g_assert_cmpstr (g_time_zone_get_abbreviation (tz, i1), ==, "PST");
+  g_assert_cmpint (g_time_zone_get_offset (tz, i1), ==, - 8 * 3600);
+  g_assert (!g_time_zone_is_dst (tz, i1));
+  g_assert_cmpstr (g_time_zone_get_abbreviation (tz, i2), ==, "PDT");
+  g_assert_cmpint (g_time_zone_get_offset (tz, i2), ==,- 7 * 3600);
+  g_assert (g_time_zone_is_dst (tz, i2));
   g_time_zone_unref (tz);
 
   tz = g_time_zone_new_identifier ("PST8PDT6:32:15");
-- 
2.34.1

