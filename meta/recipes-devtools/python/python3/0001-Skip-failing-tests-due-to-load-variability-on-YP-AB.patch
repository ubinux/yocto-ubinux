From bafdd769330c9d49a066fb1427f451b8d253262d Mon Sep 17 00:00:00 2001
From: Yi Fan Yu <yifan.yu@windriver.com>
Date: Thu, 1 Apr 2021 13:08:37 -0700
Subject: [PATCH] Skip failing tests due to load variability on YP AB

Skip these tests until AB-INT is solved.

[YOCTO #14296]

Upstream-Status: Inappropriate [OE-Specific]

Signed-off-by: Yi Fan Yu <yifan.yu@windriver.com>

Skip two additional tests due to suspected load variability failures.

[YOCTO #15131]
[YOCTO #15177]

Signed-off-by: Trevor Gamblin <tgamblin@baylibre.com>

---
 Lib/test/_test_multiprocessing.py | 3 +++
 Lib/test/test_time.py             | 2 ++
 2 files changed, 5 insertions(+)

diff --git a/Lib/test/_test_multiprocessing.py b/Lib/test/_test_multiprocessing.py
index d52b10c..5f0e4e3 100644
--- a/Lib/test/_test_multiprocessing.py
+++ b/Lib/test/_test_multiprocessing.py
@@ -682,6 +682,7 @@ class _TestProcess(BaseTestCase):
         close_queue(q)
 
     @support.requires_resource('walltime')
+    @unittest.skip('timing related test, dependent on load')
     def test_many_processes(self):
         if self.TYPE == 'threads':
             self.skipTest('test not appropriate for {}'.format(self.TYPE))
@@ -2066,6 +2067,7 @@ class _TestBarrier(BaseTestCase):
         except threading.BrokenBarrierError:
             results.append(True)
 
+    @unittest.skip('timing related test, dependent on load')
     def test_timeout(self):
         """
         Test wait(timeout)
@@ -4992,6 +4994,7 @@ class TestWait(unittest.TestCase):
         time.sleep(period)
 
     @support.requires_resource('walltime')
+    @unittest.skip('timing related test, dependent on load')
     def test_wait_integer(self):
         from multiprocessing.connection import wait
 
diff --git a/Lib/test/test_time.py b/Lib/test/test_time.py
index 02cc3f4..51a4548 100644
--- a/Lib/test/test_time.py
+++ b/Lib/test/test_time.py
@@ -492,6 +492,7 @@ class TimeTestCase(unittest.TestCase):
     @unittest.skipIf(
         support.is_wasi, "process_time not available on WASI"
     )
+    @unittest.skip('timing related test, dependent on load')
     def test_process_time(self):
         # process_time() should not include time spend during a sleep
         start = time.process_time()
@@ -505,6 +506,7 @@ class TimeTestCase(unittest.TestCase):
         self.assertTrue(info.monotonic)
         self.assertFalse(info.adjustable)
 
+    @unittest.skip('timing related test, dependent on load')
     def test_thread_time(self):
         if not hasattr(time, 'thread_time'):
             if sys.platform.startswith(('linux', 'win')):
