From 78d4c37e9c5b60ea2368627c2fc297dfc46bec2a Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Tue, 22 Jul 2025 10:15:06 -0700
Subject: [PATCH] Use libc::SYS_futex_time64 on riscv32

On RISC-V 32-bit (riscv32), the SYS_futex system call is
often handled indirectly due to the use of a 64-bit time_t
type. Specifically, while SYS_futex is not directly defined,
a related syscall like SYS_futex_time64 can be used,

Upstream-Status: Submitted [https://github.com/Amanieu/parking_lot/pull/485]
Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 src/thread_parker/linux.rs | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/src/thread_parker/linux.rs b/src/thread_parker/linux.rs
index 92601f6..3695624 100644
--- a/src/thread_parker/linux.rs
+++ b/src/thread_parker/linux.rs
@@ -108,6 +108,7 @@ impl ThreadParker {
             .as_ref()
             .map(|ts_ref| ts_ref as *const _)
             .unwrap_or(ptr::null());
+        #[cfg(not(target_arch = "riscv32"))]
         let r = unsafe {
             libc::syscall(
                 libc::SYS_futex,
@@ -117,6 +118,16 @@ impl ThreadParker {
                 ts_ptr,
             )
         };
+        #[cfg(target_arch = "riscv32")]
+        let r = unsafe {
+            libc::syscall(
+                libc::SYS_futex_time64,
+                &self.futex,
+                libc::FUTEX_WAIT | libc::FUTEX_PRIVATE_FLAG,
+                1,
+                ts_ptr,
+            )
+        };
         debug_assert!(r == 0 || r == -1);
         if r == -1 {
             debug_assert!(
@@ -137,12 +148,20 @@ impl super::UnparkHandleT for UnparkHandle {
     unsafe fn unpark(self) {
         // The thread data may have been freed at this point, but it doesn't
         // matter since the syscall will just return EFAULT in that case.
+        #[cfg(not(target_arch = "riscv32"))]
         let r = libc::syscall(
             libc::SYS_futex,
             self.futex,
             libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG,
             1,
         );
+        #[cfg(target_arch = "riscv32")]
+        let r = libc::syscall(
+            libc::SYS_futex_time64,
+            self.futex,
+            libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG,
+            1,
+        );
         debug_assert!(r == 0 || r == 1 || r == -1);
         if r == -1 {
             debug_assert_eq!(errno(), libc::EFAULT);
